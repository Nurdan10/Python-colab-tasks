# -*- coding: utf-8 -*-
"""Untitled32.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Cketj8r3kW8D_ukk_d0tZgI2UxDdz-Xh
"""

x = 'My name is Richard'
def my_function_1():
  global x
  x = 'My name is John'
print(x)

my_function_1()

city = "I love Paris!"

def my_function():
    city = "I love London!"
    print(city)

my_function()

def outer():
    x = "previous"

    def inner():
        nonlocal x
        x = "later"
        print("inner:", x)

    inner()
    print("outer:", x)

outer()

echo_word = lambda x, y : x * y
print(echo_word('hello', 3))

def square(n):   # at least two additional lines of code
    return n**2

iterable = [1, 2, 3, 4, 5]
result = map(square, iterable)
print(list(result))

iterable = [1, 2, 3, 4, 5]
map(lambda x:x**2, iterable)
result = map(lambda x:x**2, iterable)
print(type(result))  # it's a map type

print(list(result))  # we've converted it to list type to print

print(list(map(lambda x:x**2, iterable)))  # you can print directly

number_list = [1, 2, 3, 4, 5]

result = list(map(lambda x : x*3, number_list))

print(list(result))

number_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

result = list(filter(lambda x: True if x >= 6 else False, number_list))

print(list(result))

def modular_function(n):
    return lambda x: x ** n

power_of_3 = modular_function(3)

print(power_of_3(5))

print((lambda x: x**3)(5))

def sum_double(x, y):
    if x!=y:
        print(x+y)
    else:
        print((x+y)*2)
sum_double(1, 2)
sum_double(5, 5)

def parrot_trouble(talking, hour):
  if talking is True and (hour < 6 or hour > 21):
    return True
  else:
    return False
parrot_trouble(True, 22)

def parrot_trouble(talking, hour):
  if talking is True and (hour < 6 and hour > 21):
    return True
  else:
    return False
parrot_trouble(True, 8)
parrot_trouble(True, 5)
parrot_trouble(False, 22)

def parrot_trouble(talking, hour):
  if talking is True and hour < 6:
    return True
  elif talking is True and hour > 21:
    return True
  else:
    return False
parrot_trouble(True, 22)

def parrot_trouble(talking, hour):
  return talking and (hour < 6 or hour > 21)

parrot_trouble(True, 22)

def not_string( word):
    if word.startswith("not"):
      return word
    else:
      return "not" + word

not_string(" sugar")

not_string("not bad")

def harf_eksilt(string, index):
    if 0 <= index < len(string):
        return string[:index] + string[index+1:]
    else:
        return "Geçersiz index"
harf_eksilt("kalem", 1)

def harf_eksilt(string, n):
    if 0 <= n < len(string):
        return string[:n] + string[n+1:]
    else:
        return "Geçersiz index"

   harf_eksilt("kitchen", 3)

def harf_eksilt(string, n):
    if 0 <= n < len(string):
        return string[n+1:]
    else:
        return "Geçersiz index"

   harf_eksilt("kitchen", 3)

def harf_eksilt(string, n):
    if 0 <= n < len(string):
        return string[:n]
    else:
        return "Geçersiz index"

harf_eksilt("kitchen", 3)

def front_back(word):
    return word[-1] + word[1:-1] + word[0]
front_back("Clarusway")

def my_min(*args):
  return min(args)
my_min(5, 6, 7)

my_min(-100)

def my_sum(*args):
    return sum(args)
my_sum(3, 45, 67)

def my_fact(n):
    return range(1, n)*n
my_fact(5)

given_list = [1,2,3,3,3,3,4,4,5,5]
counted = given_list.count(3)
print(counted)

def most_freq(given_list):
    if not given_list:
        return None  # Return None for an empty list

    element_counts = {}  # Dictionary to store element counts

    for element in given_list:
        if element in element_counts:
            element_counts[element] += 1
        else:
            element_counts[element] = 1

    most_common_element = max(element_counts, key=element_counts.get)

    return most_common_element
print(most_freq([1,2,3,3,3,3,4,4,5,5]))